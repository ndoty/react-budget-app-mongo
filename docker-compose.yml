services:
  # This service will store your built images so all nodes in the swarm can access them.
  registry:
    image: registry:2
    ports:
      - "5000:5000"
    deploy:
      placement:
        constraints: [node.role == manager]

  # Backend Service (Node.js API)
  backend:
    # MODIFIED: Re-added the 'build' context so 'docker-compose build' works.
    build:
      context: ./server
      dockerfile: Dockerfile
    # The image name points to the local registry for 'docker-compose push' and 'docker stack deploy'.
    image: 127.0.0.1:5000/tns-budget-backend
    environment:
      - PORT=5000
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASS=${MONGO_PASS}
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure

  # Frontend Service (React App served by Nginx)
  frontend:
    # MODIFIED: Re-added the 'build' context.
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL}
        - REACT_APP_WS_URL=${REACT_APP_WS_URL}
        - REACT_APP_VERSION=${REACT_APP_VERSION}
    # The image name points to the local registry.
    image: 127.0.0.1:5000/tns-budget-frontend
    depends_on:
      - backend
    ports:
      # This maps the host port 3000 to the container port 3000
      - "3000:3000"
    deploy:
      replicas: 2 # Running 2 replicas for high availability
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
